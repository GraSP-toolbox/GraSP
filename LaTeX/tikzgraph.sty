% Copyright Benjamin Girault, École Normale Supérieure de Lyon, FRANCE /
% Inria, FRANCE (2015-11-01)
% 
% benjamin.girault@ens-lyon.fr
% 
% This software is a computer program whose purpose is to provide a Matlab
% / Octave toolbox for handling and displaying graph signals.
% 
% This software is governed by the CeCILL license under French law and
% abiding by the rules of distribution of free software.  You can  use, 
% modify and/ or redistribute the software under the terms of the CeCILL
% license as circulated by CEA, CNRS and INRIA at the following URL
% "http://www.cecill.info". 
% 
% As a counterpart to the access to the source code and  rights to copy,
% modify and redistribute granted by the license, users are provided only
% with a limited warranty  and the software's author,  the holder of the
% economic rights,  and the successive licensors  have only  limited
% liability. 
% 
% In this respect, the user's attention is drawn to the risks associated
% with loading,  using,  modifying and/or developing or reproducing the
% software by the user in light of its specific status of free software,
% that may mean  that it is complicated to manipulate,  and  that  also
% therefore means  that it is reserved for developers  and  experienced
% professionals having in-depth computer knowledge. Users are therefore
% encouraged to load and test the software's suitability as regards their
% requirements in conditions enabling the security of their systems and/or 
% data to be ensured and,  more generally, to use and operate it in the 
% same conditions as regards security. 
% 
% The fact that you are presently reading this means that you have had
% knowledge of the CeCILL license and that you accept its terms.

\NeedsTeXFormat{LaTeX2e}[1994/06/01]
\ProvidesPackage{tikzgraph}[2015/11/01]

\RequirePackage{etoolbox}
\RequirePackage{xcolor}
\RequirePackage{pgfplots}
\pgfplotsset{compat=1.11}
\RequirePackage{tikz}
\usetikzlibrary{arrows,calc,3d,positioning,shapes,backgrounds,external}
\RequirePackage{csvtools}
\RequirePackage{ifthen}

\RequirePackage{xkeyval}
\RequirePackage{xkvview}

\RequirePackage{tikzbabel}
\RequirePackage{tikzcolorscale}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Regular graph %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Color of positive values
\define@cmdkeys{flatgraph}{maxcol,mincol,edgecol,nodeedgecol,maxvalue,minvalue,nodesize,%
    nodelinewidth,intprecision,textscale,xscale}
\presetkeys{flatgraph}{maxcol=black}{}
\presetkeys{flatgraph}{mincol=white}{}
\presetkeys{flatgraph}{edgecol=gray}{}
\presetkeys{flatgraph}{nodeedgecol=black}{}
\presetkeys{flatgraph}{maxvalue=1.0}{}
\presetkeys{flatgraph}{minvalue=0.0}{}
\presetkeys{flatgraph}{nodesize=10pt}{}
\presetkeys{flatgraph}{nodelinewidth=0.2pt}{}
\presetkeys{flatgraph}{intprecision=2}{}
\presetkeys{flatgraph}{textscale=1}{}
\presetkeys{flatgraph}{xscale=1}{}
% Named color map 
\define@choicekey*{flatgraph}{colormap}[\val\nr]{hot,jet,bicolor,redblue,redbluedark,hsv}[hot]{
  \ifcase\nr\relax
    \let\colormap\hotcolor
    \def\shadingname{hot}
  \or
    \let\colormap\jetcolor
    \def\shadingname{jet}
  \or
    \let\colormap\bicolor
    \def\shadingname{bicolor}
  \or
    \let\colormap\redblue
    \def\shadingname{redblue}
  \or
    \let\colormap\redbluedark
    \def\shadingname{redbluedark}
  \or
    \let\colormap\hsvcolor
    \def\shadingname{hsv}
  \fi
}
\presetkeys{flatgraph}{colormap=hot}{}
% Show color map
\define@boolkey{flatgraph}{showcolormap}[true]{}
\presetkeys{flatgraph}{showcolormap=false}{}
\define@boolkey{flatgraph}{showedges}[true]{}
\presetkeys{flatgraph}{showedges=true}{}


\newcommand\flatgraph[4][]{
  \setkeys{flatgraph}[backgroundwidth,colormapthickness,appendedcode]{#1}
  \ifthenelse{\@babel@loaded=1}{\shorthandoff{:;!?}}{}
  \tikzpicturedependsonfile{#2}
  \tikzpicturedependsonfile{#3}
  \tikzpicturedependsonfile{#4}
  
  \IfFileExists{#2}{
  \IfFileExists{#3}{
  \IfFileExists{#4}{

%   \ifKV@flatgraph@showcolormap
%     \path[use as bounding box] (-0.1,-0.1) rectangle (12, 10.1);
%   \else
%     \path[use as bounding box] (-0.1,-0.1) rectangle (10.1, 10.1);
%   \fi
% \draw (current bounding box.north west) rectangle (current bounding box.south east);

  \colorlet{nodeedgecol}{\cmdKV@flatgraph@nodeedgecol}
  \tikzstyle{every node}=[draw=nodeedgecol,circle,minimum size=\cmdKV@flatgraph@nodesize,%
                          inner sep=0pt, transform shape]

  % Nodes
  \applyCSVfile{#2}{%
    \pgfmathtruncatemacro{\i}{\field{3}}
    \node[draw=none,fill=none] at 
      ($\field{1}*\cmdKV@flatgraph@xscale*10*(1,0)+\field{2}*10*(0,1)$) (\i_c){};
  }

  % Edges
  \colorlet{edgecol}{\cmdKV@flatgraph@edgecol}
  \ifKV@flatgraph@showedges
    \applyCSVfile{#3}{%
      \pgfmathtruncatemacro{\i}{\field{1}}
      \pgfmathtruncatemacro{\j}{\field{2}}
      \ifthenelse{\equal{\field{4}}{1}}{
        \path[edgecol,-latex] (\i_c) edge (\j_c);
      }{
        \draw[edgecol] (\i_c) -- (\j_c);
      }
    }
  \fi

  % Data
  \colorlet{maxcol}{\cmdKV@flatgraph@maxcol}
  \colorlet{mincol}{\cmdKV@flatgraph@mincol}
  \applyCSVfile{#4}{%
    \pgfmathtruncatemacro{\i}{\field{1}}
    \pgfmathparse{abs((\field{2} - \cmdKV@flatgraph@minvalue) /
                  (\cmdKV@flatgraph@maxvalue - \cmdKV@flatgraph@minvalue))}
    \pgfmathparse{min(1, max(0, \pgfmathresult))}
    \edef\value{\pgfmathresult}
    \colormap{\value}
    \node[fill=curcol,line width=\cmdKV@flatgraph@nodelinewidth](\i) at (node cs:name=\i_c){};
  }
  
  % Graph bounding box
  \begin{scope}[every node/.style={draw=none,fill=none}]
    \coordinate (nw) at (current bounding box.north west) {};
    \coordinate (se) at (current bounding box.south east) {};
    \coordinate (sw) at ($(0,0)!(nw)!(1,0)+(0,0)!(se)!(0,1)$) {};
    \coordinate (ne) at ($(0,0)!(nw)!(0,1)+(0,0)!(se)!(1,0)$) {};

    \coordinate (nwscale) at ($(ne)+(0.5,0)$) {};
    \coordinate (nescale) at ($(ne)+(1,0)$) {};
    \coordinate (swscale) at ($(se)+(0.5,0)$) {};
    \coordinate (sescale) at ($(se)+(1,0)$) {};
    \coordinate (mwscale) at ($(nwscale)!0.5!(swscale)$) {};
    \coordinate (mescale) at ($(nescale)!0.5!(sescale)$) {};
  \end{scope}
  \draw (nw) rectangle (se);
  
  % Color scale
  \ifKV@flatgraph@showcolormap
    \ifthenelse{\equal{\shadingname}{bicolor}}{
      \defbicolorshading
    }{}
    \draw[shading=\shadingname] ($(se)+(0.5,0)$) rectangle ($(ne)+(1,0)$);
    \pgfkeys{/pgf/number format/.cd,std=-3,zerofill,precision=\cmdKV@flatgraph@intprecision}
    \pgfmathparse{\cmdKV@flatgraph@minvalue + (\cmdKV@flatgraph@maxvalue - 
      \cmdKV@flatgraph@minvalue) / 2}
    \pgfmathprintnumberto{\pgfmathresult}{\midvalueprint}
    \pgfmathprintnumberto{\cmdKV@flatgraph@minvalue}{\minvalueprint}
    \pgfmathprintnumberto{\cmdKV@flatgraph@maxvalue}{\maxvalueprint}
    \node[above right,draw=none,rectangle,scale=\cmdKV@flatgraph@textscale]
      at ($(sescale)+(0.1,0)$) (minlabel){$\minvalueprint$};
    \node[anchor=west,draw=none,rectangle,scale=\cmdKV@flatgraph@textscale]
      at ($(mescale)+(0.1,0)$) (midlabel){$\midvalueprint$};
    \node[below right,draw=none,rectangle,scale=\cmdKV@flatgraph@textscale]
      at ($(nescale)+(0.1,0)$) (maxlabel){$\maxvalueprint$};
    \draw (mwscale) -- ($(mwscale)+(0.15,0)$) ($(mescale)-(0.15,0)$) -- (mescale);
  \fi
%   \draw (current bounding box.north west) rectangle (current bounding box.south east);
  }{
    \node[draw,transform shape] (error) {Missing file: \detokenize{#4}};
  }
  }{
    \node[draw,transform shape] (error) {Missing file: \detokenize{#3}};
  }
  }{
    \node[draw,transform shape] (error) {Missing file: \detokenize{#2}};
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Regular graph with background %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\define@cmdkeys{backgroundflatgraph}{backgroundwidth,appendedcode}
\presetkeys{backgroundflatgraph}{backgroundwidth=10cm}{}
\presetkeys{backgroundflatgraph}{appendedcode={}}{}

\newcommand\backgroundflatgraph[5][]{
  \setkeys{backgroundflatgraph,flatgraph}{#1}
  \ifthenelse{\@babel@loaded=1}{\shorthandoff{:;!?}}{}
  \coordinate (topright) at (10,10);
  \coordinate (bottomleft) at (0,0);
  \node[inner sep=0, above right] (background) 
    {\includegraphics[width=\cmdKV@backgroundflatgraph@backgroundwidth]{#5}};
  \begin{scope}[every node/.style={draw=none,fill=none}]
    \coordinate (nw) at (current bounding box.north west) {};
    \coordinate (se) at (current bounding box.south east) {};
    \coordinate (sw) at ($(0,0)!(nw)!(1,0)+(0,0)!(se)!(0,1)$) {};
    \coordinate (ne) at ($(0,0)!(nw)!(0,1)+(0,0)!(se)!(1,0)$) {};

    \coordinate (nwscale) at ($(ne)+(0.5,0)$) {};
    \coordinate (nescale) at ($(ne)+(1,0)$) {};
    \coordinate (swscale) at ($(se)+(0.5,0)$) {};
    \coordinate (sescale) at ($(se)+(1,0)$) {};
    \coordinate (mwscale) at ($(nwscale)!0.5!(swscale)$) {};
    \coordinate (mescale) at ($(nescale)!0.5!(sescale)$) {};
  \end{scope}
  
  \pgfpointdiff{\pgfpointanchor{background}{south west}}%
    {\pgfpointanchor{background}{north east}}
  \pgfgetlastxy{\imagex}{\imagey}
  \pgfpointdiff{\pgfpointanchor{bottomleft}{center}}{\pgfpointanchor{topright}{center}}
  \pgfgetlastxy{\cloudx}{\cloudy}
 
  \pgfmathparse{\imagex / \cloudx}
  \edef\xscale{\pgfmathresult}
  \pgfmathparse{\imagey / \cloudy}
  \edef\yscale{\pgfmathresult}

  \begin{scope}[x={(\xscale,0)},y={(0,\yscale)}]
    \flatgraph[#1,showcolormap=false]{#2}{#3}{#4}

    \cmdKV@backgroundflatgraph@appendedcode
  \end{scope}

  % Graph bounding box
  \begin{scope}[every node/.style={draw=none,fill=none}]
    \coordinate (nw) at (current bounding box.north west) {};
    \coordinate (se) at (current bounding box.south east) {};
    \coordinate (sw) at ($(0,0)!(nw)!(1,0)+(0,0)!(se)!(0,1)$) {};
    \coordinate (ne) at ($(0,0)!(nw)!(0,1)+(0,0)!(se)!(1,0)$) {};

    \coordinate (nwscale) at ($(ne)+(0.5,0)$) {};
    \coordinate (nescale) at ($(ne)+(1,0)$) {};
    \coordinate (swscale) at ($(se)+(0.5,0)$) {};
    \coordinate (sescale) at ($(se)+(1,0)$) {};
    \coordinate (mwscale) at ($(nwscale)!0.5!(swscale)$) {};
    \coordinate (mescale) at ($(nescale)!0.5!(sescale)$) {};
  \end{scope}
  \draw (nw) rectangle (se);
  
  % Color scale
  \ifKV@flatgraph@showcolormap
    \ifthenelse{\equal{\shadingname}{bicolor}}{
      \colorlet{maxcol}{\cmdKV@flatgraph@maxcol}
      \colorlet{mincol}{\cmdKV@flatgraph@mincol}
      \defbicolorshading
    }{}
    \draw[shading=\shadingname] (swscale) rectangle (nescale);
    \pgfkeys{/pgf/number format/.cd,std=-3,zerofill,precision=\cmdKV@flatgraph@intprecision}
    \pgfmathparse{\cmdKV@flatgraph@minvalue + (\cmdKV@flatgraph@maxvalue - 
      \cmdKV@flatgraph@minvalue) / 2}
    \pgfmathprintnumberto{\pgfmathresult}{\midvalueprint}
    \pgfmathprintnumberto{\cmdKV@flatgraph@minvalue}{\minvalueprint}
    \pgfmathprintnumberto{\cmdKV@flatgraph@maxvalue}{\maxvalueprint}
    \begin{scope}[every node/.style={inner sep=0pt,transform shape}]
      \node[above right,draw=none,rectangle,scale=\cmdKV@flatgraph@textscale]
        at ($(sescale)+(0.1,0)$) (minlabel){$\minvalueprint$};
      \node[anchor=west,draw=none,rectangle,scale=\cmdKV@flatgraph@textscale]
        at ($(mescale)+(0.1,0)$) (midlabel){$\midvalueprint$};
      \node[below right,draw=none,rectangle,scale=\cmdKV@flatgraph@textscale]
        at ($(nescale)+(0.1,0)$) (maxlabel){$\maxvalueprint$};
    \end{scope}
    \draw (mwscale) -- ($(mwscale)+(0.15,0)$) ($(mescale)-(0.15,0)$) -- (mescale);
  \fi
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Stem graph %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Scaling of stems
\define@cmdkeys{stemgraph}{zangle,stemscale,poscol,negcol,appendedcode}
\presetkeys{stemgraph}{zangle=0}{}
\presetkeys{stemgraph}{stemscale=1}{}
\presetkeys{stemgraph}{poscol=red}{}
\presetkeys{stemgraph}{negcol=blue}{}
\presetkeys{stemgraph}{appendedcode={}}{}


\newcommand\stemgraph[4][]{
  \setkeys{flatgraph,stemgraph}{#1}
  \ifthenelse{\@babel@loaded=1}{\shorthandoff{:;!?}}{}
  \pgfmathsetmacro\sint{sin(-\cmdKV@stemgraph@zangle + 22.5)}
  \pgfmathsetmacro\boundsint{sin(\cmdKV@stemgraph@zangle) * 1.05}
%   \path[use as bounding box] (-0.1,-1.1,0) rectangle (10.1 + 10 * \boundsint,5.1,0);
  \tikzpicturedependsonfile{#2}
  \tikzpicturedependsonfile{#3}
  \tikzpicturedependsonfile{#4}
  \begin{scope}[z={(\sint,0,1)}]
    \begin{scope}[y={(0,1,0)},z={(0,0,-1)}]
      \colorlet{nodeedgecol}{\cmdKV@flatgraph@nodeedgecol}
      \tikzstyle{every node}=[draw=nodeedgecol,circle,fill=white,%
                              minimum size=\cmdKV@flatgraph@nodesize,%
                              inner sep=0pt, canvas is xz plane at y=0, transform shape]
      \tikzstyle{every to}=[canvas is xz plane at y=0]

      % Nodes
      \applyCSVfile{#2}{%
        \pgfmathtruncatemacro{\i}{\field{3}}
        \node[draw=none,fill=none] at ($\field{1}*10*(1,0,0)+\field{2}*10*(0,0,1)$) (\i_c){};
      }

      % Edges
      \colorlet{edgecol}{\cmdKV@flatgraph@edgecol}
      \ifKV@flatgraph@showedges
        \applyCSVfile{#3}{%
          \pgfmathtruncatemacro{\i}{\field{1}}
          \pgfmathtruncatemacro{\j}{\field{2}}
          \ifthenelse{\equal{\field{4}}{1}}{
            \path[edgecol,-latex] (\i_c) edge (\j_c);
          }{
            \draw[edgecol] (\i_c) -- (\j_c);
          }
        }
      \fi

      % Data
      \colorlet{maxcol}{\cmdKV@flatgraph@maxcol}
      \colorlet{mincol}{\cmdKV@flatgraph@mincol}
      \applyCSVfile{#4}{%
        \pgfmathtruncatemacro{\i}{\field{1}}

        % Node
        \pgfmathparse{abs((\field{2} - \cmdKV@flatgraph@minvalue) /
                      (\cmdKV@flatgraph@maxvalue - \cmdKV@flatgraph@minvalue))}
        \pgfmathparse{min(1, max(0, \pgfmathresult))}
        \edef\valueabs{\pgfmathresult}
        \colormap{\valueabs}
        \node[fill=curcol](\i) at (node cs:name=\i_c){};

        % Stem
        \edef\value{\field{2}}
        \pgfmathparse{abs(\value) < 0.01}
        \ifthenelse{\equal{\pgfmathresult}{0}}{
          \coordinate (\i_s) at ($(\i_c)+\value*(0,\cmdKV@stemgraph@stemscale,0)$);
          \pgfmathparse{\value > 0}
          \ifthenelse{\equal{\pgfmathresult}{1}}{
            \draw[\cmdKV@stemgraph@poscol,thick]
              (\i_c) -- (\i_s); %$(\i_c)+\value*(0,\cmdKV@stemgraph@stemscale,0)$);
          }{
            \draw[\cmdKV@stemgraph@negcol,thick]
              (\i_c) -- ($(\i_c)+\value*(0,\cmdKV@stemgraph@stemscale,0)$);
          }
        }{
          \coordinate (\i_s) at (\i_c);
        }
      }

      \cmdKV@stemgraph@appendedcode
    \end{scope}
  \end{scope}
  
  % Graph bounding box
  \coordinate (nw) at (current bounding box.north west) {};
  \coordinate (se) at (current bounding box.south east) {};
  \coordinate (sw) at (current bounding box.south west) {};
  \coordinate (ne) at (current bounding box.north east) {};

  \coordinate (nwscale) at ($(ne)+(0.5,0,0)$) {};
  \coordinate (nescale) at ($(ne)+(1,0,0)$) {};
  \coordinate (swscale) at ($(se)+(0.5,0,0)$) {};
  \coordinate (sescale) at ($(se)+(1,0,0)$) {};
  \coordinate (mwscale) at ($0.5*(nwscale)+0.5*(swscale)$) {};
  \coordinate (mescale) at ($0.5*(nescale)+0.5*(sescale)$) {};
  \draw (sw) rectangle (ne);
  
  % Color scale
  \ifKV@flatgraph@showcolormap
    \ifthenelse{\equal{\shadingname}{bicolor}}{
      \defbicolorshading
    }{}
    \tikzstyle{every node}=[inner sep=0pt, transform shape]
    \draw[shading=\shadingname] ($(se)+(0.5,0)$) rectangle ($(ne)+(1,0,0)$);
    \pgfkeys{/pgf/number format/.cd,std=-3,zerofill,precision=\cmdKV@flatgraph@intprecision}
    \pgfmathparse{\cmdKV@flatgraph@minvalue + (\cmdKV@flatgraph@maxvalue - 
      \cmdKV@flatgraph@minvalue) / 2}
    \pgfmathprintnumberto{\pgfmathresult}{\midvalueprint}
    \pgfmathprintnumberto{\cmdKV@flatgraph@minvalue}{\minvalueprint}
    \pgfmathprintnumberto{\cmdKV@flatgraph@maxvalue}{\maxvalueprint}
    \node[above right,draw=none,rectangle,scale=\cmdKV@flatgraph@textscale]
      at ($(sescale)+(0.07,0,0)$) (minlabel){$\minvalueprint$};
    \node[anchor=west,draw=none,rectangle,scale=\cmdKV@flatgraph@textscale]
      at ($(mescale)+(0.07,0,0)$) (midlabel){$\midvalueprint$};
    \node[below right,draw=none,rectangle,scale=\cmdKV@flatgraph@textscale]
      at ($(nescale)+(0.07,0,0)$) (maxlabel){$\maxvalueprint$};
    \draw (mwscale) -- ($(mwscale)+(0.15,0,0)$) ($(mescale)-(0.15,0,0)$) -- (mescale);
  \fi
}

\endinput